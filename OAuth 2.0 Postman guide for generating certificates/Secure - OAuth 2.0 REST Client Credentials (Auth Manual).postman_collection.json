{
	"info": {
		"_postman_id": "40b7527e-1536-44c3-a281-4e86e78759b5",
		"name": "Secure - OAuth 2.0 REST Client Credentials (Auth Manual)",
		"description": "This collection shows how to get an access token using OAuth 2.0 and use in a REST Web Services request. There's custom script to request the access token.\n\nFirst create a certificate through openssl and create the mapping in NetSuite. Here's an easy way to create a valid certificate in openssl, at least as a developer testing out the process:\n\n`req -x509 -newkey rsa:3072 -keyout sw2021d_key.pem -out sw2021d_cert.pem -days 365 -nodes`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27737471"
	},
	"item": [
		{
			"name": "Get JSRSASIGN Crypto Library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"jsrsasign-js\",responseBody); // set the library as global\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
					"protocol": "https",
					"host": [
						"kjur",
						"github",
						"io"
					],
					"path": [
						"jsrsasign",
						"jsrsasign-latest-all-min.js"
					]
				},
				"description": "The built-in crypto-js library does not support PS256 and other algorithms which are supported for client credentials. This request brings in library jsrsasign-js, which does support required algorithms. See https://github.com/kjur/jsrsasign. This and the code for request that utilize this library was adapted from https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs."
			},
			"response": []
		},
		{
			"name": "Get Access Token (Generate JWT)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var navigator = {}; \r",
							"var window = {}; \r",
							"eval(pm.globals.get(\"jsrsasign-js\"));\r",
							"\r",
							"const cryptojs = require('crypto-js'); \r",
							"\r",
							"var jwtHeader = {\r",
							"    alg: 'PS256',\r",
							"    typ: 'JWT',\r",
							"    kid: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \r",
							"};\r",
							"\r",
							"let stringifiedJwtHeader = JSON.stringify(jwtHeader);\r",
							"\r",
							"let jwtPayload = {\r",
							"    iss: pm.environment.get('CONSUMER_KEY'), \r",
							"    scope: ['restlets','rest_webservices'], \r",
							"    iat: (new Date() / 1000),               \r",
							"    exp: (new Date() / 1000) + 3600,        \r",
							"    aud: 'https://[account-id].suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token'\r",
							"};\r",
							"\r",
							"var stringifiedJwtPayload = JSON.stringify(jwtPayload);\r",
							"\r",
							"let secret = pm.environment.get('CERTIFICATE_PRIVATE_KEY');\r",
							"let encodedSecret = cryptojs.enc.Base64.stringify(cryptojs.enc.Utf8.parse(secret)); \r",
							"\r",
							"let signedJWT = KJUR.jws.JWS.sign('PS256',stringifiedJwtHeader,stringifiedJwtPayload,secret);\r",
							"\r",
							"pm.collectionVariables.set('clientAssertion', signedJWT);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"\r",
							"    let jsonBody = pm.response.json();\r",
							"\r",
							"    let accessToken = jsonBody.access_token;\r",
							"\r",
							"    console.log (accessToken);\r",
							"\r",
							"    pm.collectionVariables.set(\"clientCredentialsAccessToken\", accessToken);\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{clientAssertion}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://[Account-Id].suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token",
					"protocol": "https",
					"host": [
						"[Account-Id]",
						"suitetalk",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"services",
						"rest",
						"auth",
						"oauth2",
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Access Token (Generate JWT) [with comments]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var navigator = {}; // necessary as part of \"eval\" on jsrsasign lib\r",
							"var window = {}; // necessary as part of \"eval\" on jsrsasign lib\r",
							"eval(pm.globals.get(\"jsrsasign-js\")); // grabbing jsrsasign lib, loaded in separate GET \r",
							"\r",
							"const cryptojs = require('crypto-js'); // using crypto js for base64 encoding\r",
							"\r",
							"// Create JWT header\r",
							"var jwtHeader = {\r",
							"    \r",
							"    alg: 'PS256', // Using PS256, which is one of the algorithms NetSuite supports for client credentials\r",
							"    typ: 'JWT',\r",
							"    kid: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' // Certificate Id on the client credentials mapping\r",
							"\r",
							"};\r",
							"\r",
							"let stringifiedJwtHeader = JSON.stringify(jwtHeader);\r",
							"\r",
							"// Create JWT payload\r",
							"let jwtPayload = {\r",
							"    iss: pm.environment.get('CONSUMER_KEY'), // consumer key of integration record\r",
							"    scope: ['restlets','rest_webservices'], // scopes specified on integration record\r",
							"    iat: (new Date() / 1000),               // timestamp in seconds\r",
							"    exp: (new Date() / 1000) + 3600,        // timestamp in seconds, 1 hour later, which is max for expiration\r",
							"    aud: 'https://[account-id]].suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token'\r",
							"};\r",
							"\r",
							"var stringifiedJwtPayload = JSON.stringify(jwtPayload);\r",
							"\r",
							"// The secret is the private key of the certificate loaded into the client credentials mapping in NetSuite\r",
							"let secret = pm.environment.get('CERTIFICATE_PRIVATE_KEY');\r",
							"let encodedSecret = cryptojs.enc.Base64.stringify(cryptojs.enc.Utf8.parse(secret)); // we need to base64 encode the key\r",
							"\r",
							"// Sign the JWT with the PS256 algorithm (algorithm must match what is specified in JWT header).\r",
							"// The JWT is signed using the jsrsasign lib (KJUR)\r",
							"let signedJWT = KJUR.jws.JWS.sign('PS256',stringifiedJwtHeader,stringifiedJwtPayload,secret);\r",
							"\r",
							"// The signed JWT is the client assertion (encoded JWT) that is used to retrieve an access token\r",
							"pm.collectionVariables.set('clientAssertion', signedJWT);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"\r",
							"    // Get the JSON body of the response\r",
							"    let jsonBody = pm.response.json();\r",
							"\r",
							"    let accessToken = jsonBody.access_token;\r",
							"\r",
							"    console.log (accessToken);\r",
							"\r",
							"    pm.collectionVariables.set(\"clientCredentialsAccessToken\", accessToken);\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{clientAssertion}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://[Account-Id].suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token",
					"protocol": "https",
					"host": [
						"[Account-Id]",
						"suitetalk",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"services",
						"rest",
						"auth",
						"oauth2",
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{clientCredentialsAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://[accounid].suitetalk.api.netsuite.com/services/rest/record/v1/salesorder/9450",
					"protocol": "https",
					"host": [
						"[accounid]",
						"suitetalk",
						"api",
						"netsuite",
						"com"
					],
					"path": [
						"services",
						"rest",
						"record",
						"v1",
						"salesorder",
						"9450"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientCredentialsAccessToken",
			"value": ""
		},
		{
			"key": "clientAssertion",
			"value": ""
		}
	]
}